openapi: 3.0.3
info:
  title: Order Management API
  version: 1.0.0
  description: API for managing users, products, and orders
  contact:
    name: Your Company
    email: support@example.com
servers:
  - url: http://localhost:4000/api
    description: Local development server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        role:
          type: string
      required:
        - id
        - email
        - role
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        description:
          type: string
      required:
        - id
        - name
        - price
    OrderItem:
      type: object
      properties:
        productId:
          type: integer
        quantity:
          type: integer
        unitPrice:
          type: number
      required:
        - productId
        - quantity
        - unitPrice
    Order:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        status:
          type: string
          enum: [pending, completed, cancelled]
        totalAmount:
          type: number
        createdAt:
          type: string
          format: date-time
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        user:
          $ref: "#/components/schemas/User"
      required:
        - id
        - userId
        - status
        - totalAmount
paths:
  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: admin@example.com
              password: Admin123!
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid credentials
        "401":
          description: Unauthorized
  /products:
    get:
      summary: List all products
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      summary: Create a product (admin/supplier only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
  /products/{id}:
    get:
      summary: Get product by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Not found
    put:
      summary: Update product by ID (admin/supplier only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Updated product
        "404":
          description: Not found
    delete:
      summary: Delete product by ID (admin/supplier only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Deleted successfully
        "404":
          description: Not found
  /orders:
    get:
      summary: List orders
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      summary: Create a new order (customer/admin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                      quantity:
                        type: integer
                    required:
                      - productId
                      - quantity
            example:
              items:
                - productId: 1
                  quantity: 2
                - productId: 2
                  quantity: 1
      responses:
        "201":
          description: Order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid request
  /orders/{id}:
    get:
      summary: Get order by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "403":
          description: Forbidden
        "404":
          description: Not found
    put:
      summary: Update order status (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, completed, cancelled]
      responses:
        "200":
          description: Updated order
        "400":
          description: Invalid status
        "404":
          description: Not found
    delete:
      summary: Delete order (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Deleted successfully
        "404":
          description: Not found
